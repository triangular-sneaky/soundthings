require("granular-common.genexpr");

Buffer data("rbGranularData");


// number of source chans
Param nSourceChans(3);
Param snFftWindowSize(1024);


siSourceHeadWritten = in1;


// analyzed frame is a frame around 1 frame size back from written head
siSourceAnalyzed = _wrap(siSourceHeadWritten - snFftWindowSize, dim(data));
fiSourceAnalyzed = siToFi(siSourceAnalyzed, snFftWindowSize, data, nSourceChans);

// todo: write a test to ensure frame number increments at currentBinIndex=0

currentBinIndex = data.peek(siSourceHeadWritten, getBinIndexChan(nSourceChans));
if (currentBinIndex < snFftWindowSize/2) {
    for (chanI = 0; chanI < nSourceChans; chanI += 1) {

        // pokeFrameCache(666, fiSourceAnalyzed, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), chanI, 
        //         snFftWindowSize, data, nSourceChans);

        // layout per chan per frame: (maxI)(maxV)
        // ()
        thisFramePrevMaxV = peekFrameCache(fiSourceAnalyzed, F_FRAME_CACHE_FUNDAMENTAL_VALUE(), chanI, 
            snFftWindowSize, data, nSourceChans);

        thisV = data.peek(siSourceHeadWritten, getSourceChan(SEC_MAG(), chanI, nSourceChans));
        if (thisV > thisFramePrevMaxV) {
            thisFramePrevMaxV = thisV;
            pokeFrameCache(currentBinIndex, fiSourceAnalyzed, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), chanI, 
                snFftWindowSize, data, nSourceChans);
            pokeFrameCache(thisV, fiSourceAnalyzed, F_FRAME_CACHE_FUNDAMENTAL_VALUE(), chanI, 
                snFftWindowSize, data, nSourceChans);

            pokeFrameCache(fiSourceAnalyzed, fiSourceAnalyzed, F_FRAME_CACHE_DEBUG_0(), chanI, 
                snFftWindowSize, data, nSourceChans);
            pokeFrameCache(siSourceAnalyzed, fiSourceAnalyzed, F_FRAME_CACHE_DEBUG_1(), chanI, 
                snFftWindowSize, data, nSourceChans);
                
           
        }

         
    }
}