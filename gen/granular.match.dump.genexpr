require("granular-common.genexpr");



assertEq(testIndex, a, b) {
	if (a == b) {
		return 0, b;
	} else return testIndex, b;
}

selectKthLargest(data, chan, start, len, k) {
    if (k > len) return -1;

    left = k + 1;
    prevLargest = 9999999;
    candidateI = -1;

    while (candidateI < 0) {
        maxV = -99999;
        maxI = -1;
        thisRoundLeft = left;
        candidateI = -1;
        for (i = start; i < len + start; i += 1) {
            v = data.peek(i, chan);
            if (v < prevLargest) {
                if (v > maxV) {
                    maxI = i;
                    maxV = v;
                    thisRoundLeft = left;
                    candidateI = -1;
                }
                if (v == maxV) {
                    thisRoundLeft -= 1;
                    if (thisRoundLeft == 0) {
                        candidateI = i;
                    }
                }
            }
        }
        left = thisRoundLeft;

        prevLargest = maxV;
    }
    return candidateI;

}
findFundamental(fi, iSourceChan, snFftWindowSize, data, nSourceChans) {
	maxM = -1;
	maxMI = -1;
	for (i = 0; i < snFftWindowSize; i += 1) {
		binAddress = addressBin(fi, i, snFftWindowSize, data, nSourceChans);
		m = data.peek(binAddress, getSourceChan(SEC_MAG(), iSourceChan, nSourceChans));
		if (maxM < m) {
			maxM = m;
			maxMI = i;
		}
	} 
	return maxMI, maxM;
}

calculateRelativeDistance(freqBinI1, freqBinI2) {
	// VERY naive
	return abs(freqBinI1 - freqBinI2);
}

rollWithWeights(weights, start, len, chanStart, chansCount) {
        // 1. calc sum
        sum = 0;
        for (chan = chanStart; chan < chanStart + chansCount; chan += 1)
            for (i = start; i < start + len; i += 1) {
                sum += weights.peek(i, chan);
            }

        roll = uniformRand01() * sum;

        acc = 0;
        result = -1;
        resultChan = -1;
        for (chan = chanStart; chan < chanStart + chansCount && result < 0; chan += 1)
            for (i = start; i < start + len && result < 0; i += 1) {
                acc += weights.peek(i, chan);
                if (acc >= roll) {
                    result = i;
                    resultChan = chan;
                }
            }
        return result, resultChan;
    }

// ===================================
// notation
// si -> sample (value) index in wave
// sn -> number of samples in wave
// fi -> frame index in source
// fn -> number of frames


// ===================================
	
// ===================================
// parameters
// ===================================
Param snMaxKeyLen(10240);
Param snPosStartOffset(0); // negative offset back
Param snPosEndOffset(0); // negative offset back

Param snFftWindowSize(1024);

// number of source chans
Param nSourceChans(3);

// todo: use
Param guideModulationDryWet(0.);

Param magnitudeScaleToleranceUp(10.);
Param magnitudeScaleToleranceDown(0.);

Param algo(1);

// ===================================
// Algo params: ALGO_BIGBUS
History bigBusNextStop(0);
Param saturation(0.);
Param brightness(1.);
// ===================================


// ===================================
// external data
// ===================================

Buffer data("rbGranularData");

// ===================================
// internal data
// ===================================


//Data match(fnPosWidth);
Buffer match("dbgMatch");

Data testData(100);


// sections
// NOTE: inlined in functions and shared


// methods
ALGO_LINEAR_POS_START = 0;
ALGO_LINEAR_HEAD = 1;

ALGO_SCULPT = 2;
ALGO_BIGBUS = 3;

dataSize = dim(data);
fnTotal = dataSize / snFftWindowSize;

// ===================================
// inputs and derivatives
// ===================================

siGuideHead = in1;// TODO: separate guide/source indexing
siSourceHead = in1; //buffer head siSourceHead -> drives fiPosStart, fnPosWidth, fiGuideHead
fiGuideHead = siToFi(siGuideHead - 2*snFftWindowSize,snFftWindowSize, data, nSourceChans) ; // index of last fully written fft frameframe
fiSourceHead = fiGuideHead; // TODO: separate guide/source indexing

siPosStart = siSourceHead + snPosStartOffset;
siPosEnd = siSourceHead + snPosEndOffset;

fiPosStart = siToFi(siPosStart, snFftWindowSize, data, nSourceChans);
fiPosEnd = siToFi(siPosEnd, snFftWindowSize, data, nSourceChans);

fiPosStart = min(fiPosStart, fiSourceHead);
fiPosEnd = min(fiPosEnd, fiSourceHead);
fnPosWidth = max(1, fiPosEnd - fiPosStart);

// TODO: keylen???
//snGranuleSize = in2;

// fnMaxKeyLen = ceil(snMaxKeyLen / snFftWindowSize);
// if (fnMaxKeyLen == 0) {
// 	fnMaxKeyLen = 100000000;
// }
// fnKeyLen = min(ceil(snGranuleSize / snFftWindowSize), fnMaxKeyLen);


// ===================================
// stubs and TODOs
// ===================================
chan = 0;

// ===================================
// results
// ===================================
ResultGrainPos = 0;
ResultGrainChan = 0;
ResultGrainScale = 1.;
ResultGrainPhaseShift = 0.;

TelemetryGuideMatchBin  = 0.;
TelemetrySourceMatchBin = 0.;

// ===================================
// DEBUG
// ===================================
DebugIn = in4;
Debug0 = 0.;
Debug1 = 0.;
Debug2 = 0.;
Debug3 = 0.;

// ===================================
// ALGOS
// ===================================


if (algo == ALGO_LINEAR_POS_START) {
	// ----------------------------------
	// DEBUG: debugging: indexing poc 
	// PoC draw FFT index on scope: 
	// find max freq in a frame at fiPosStart and debug_out its index
	// NOTE: intentionally using source pos on guide chan. this wont stand later
	// ----------------------------------
	maxM = -1.;
	maxMI = -1;
	for (i = 0; i < snFftWindowSize; i += 1) {
		binAddress = addressBin(fiPosStart, i, snFftWindowSize, data, nSourceChans);
		m = data.peek(binAddress, getGuideChan(SEC_MAG(), nSourceChans));
		if (maxM < m) {
			maxM = m;
			maxMI = i;
		}
	} 
	DebugPocFftIndexing = maxMI;
	DebugSanity0 = dataSize;
	Debug0BinAddress = addressBin(fiPosStart, 0, snFftWindowSize, data, nSourceChans);
	Debug0BinValue = data.peek(Debug0BinAddress, getGuideChan(SEC_MAG(), nSourceChans));

	Debug0 = DebugPocFftIndexing;
	Debug1 = Debug0BinAddress;
	Debug2 = fiPosStart;
	Debug3 = maxM;

	ResultGrainPos = addressWavFrameStart(fiPosStart, snFftWindowSize, data, nSourceChans);

}

if (algo == ALGO_LINEAR_HEAD) {
	ResultGrainPos = addressWavFrameStart(fiGuideHead, snFftWindowSize, data, nSourceChans);
}

if (algo == ALGO_SCULPT ) {
	// ---------------------------------
	// Sculpting algo based on source fundamental: uniform pick and scale by guide_mag[source_fundamental_bin] / source_mag[source_fundamental_bin]
	// ---------------------------------

	
	// for (i = 0; i < 1000; i += 1) {
	fiResultGrain = floor(fiPosStart + uniformRand01() * fnPosWidth);
	ResultGrainPos = addressWavFrameStart(fiResultGrain, snFftWindowSize, data, nSourceChans);

	ResultGrainChan = floor(uniformRand01() * nSourceChans);

	fundamentalI, apparentMag = findFundamental(fiResultGrain, ResultGrainChan, snFftWindowSize, data, nSourceChans);
	desiredMag = data.peek(addressBin(fiGuideHead, fundamentalI, snFftWindowSize, data, nSourceChans), getGuideChan(SEC_MAG(), nSourceChans));

	targetScale = 1.;

	if (apparentMag != 0) {
		targetScale = min(desiredMag / apparentMag, magnitudeScaleToleranceUp);
	}
		// if (targetScale > 1 - magnitudeScaleToleranceDown && targ)
	// }
	
	ResultGrainChan = getSourceChan(SEC_WAV(), floor(uniformRand01() * nSourceChans), nSourceChans);
	ResultGrainScale = targetScale;
	Debug0 = fundamentalI;
	Debug1 = apparentMag;
	Debug2 = desiredMag;
}

if (algo == ALGO_BIGBUS) {
	nGuidePeaks = max(1, floor(saturation * brightness));
	bigBusNextStop = (bigBusNextStop + 1) % nGuidePeaks;

	bin0Address = addressBin(fiGuideHead, 0, snFftWindowSize, data, nSourceChans);
	peakBinAddress = selectKthLargest(
		data, 
		getGuideChan(SEC_MAG(), nSourceChans), 
		bin0Address, 
		snFftWindowSize, 
		bigBusNextStop
	);
	peakI = peakBinAddress - bin0Address;
	peakV = data.peek(peakBinAddress, 
		getGuideChan(SEC_MAG(), nSourceChans));
	// Debug0 = fiGuideHead ;
	Debug0 = peakI;
	Debug1 = peakV;

	// calculate weights into match
	for (chanI = 0; chanI < nSourceChans; chanI += 1)
	for (i = 0; i <  fnPosWidth; i += 1) {
		fi = i + fiPosStart;
		fundamental = peekFrameCache(fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), chanI,
			snFftWindowSize, data, nSourceChans);

		distance = calculateRelativeDistance(fundamental, peakI);
		match.poke(exp(-distance), i, chanI);
	}

	// roll
	roll,chan = rollWithWeights(match, 0, fnPosWidth, 0, nSourceChans);
	// Debug0 = roll;
	// Debug1 = chan;
	// Debug2 = fnPosWidth;



	fiResultGrain = roll + fiPosStart;
	ResultGrainPos = addressWavFrameStart(fiResultGrain, snFftWindowSize, data, nSourceChans);
	ResultGrainChan = getSourceChan(SEC_WAV(), chan, nSourceChans);
	TelemetrySourceMatchBin = 
		peekFrameCache(fiResultGrain, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), chan,
			snFftWindowSize, data, nSourceChans);
	Debug2 = TelemetrySourceMatchBin;
	Debug3 = 
		peekFrameCache(fiResultGrain, F_FRAME_CACHE_FUNDAMENTAL_VALUE(), chan,
			snFftWindowSize, data, nSourceChans);

	TelemetryGuideMatchBin = peakI;
	
}



// ===================================
// / ALGOS
// ===================================


// ====== TEST SECTION ==============
TestIn = in6;
TestFailures = 0;

if (TestIn == 1) {
	// chan indexing
	TestFailures += assertEq(0x1, 1, getGuideChan(SEC_WAV(), nSourceChans));
	TestFailures += assertEq(0x2, 5, getGuideChan(SEC_MAG(), nSourceChans));
	TestFailures += assertEq(0x4, 2, getSourceChan(SEC_WAV(), 0, nSourceChans));
	TestFailures += assertEq(0x8, 7, getSourceChan(SEC_MAG(), 1, nSourceChans));
	TestFailures += assertEq(0x8, 12, getSourceChan(SEC_PHASE(), nSourceChans-1, nSourceChans));
	TestFailures += assertEq(0x10, 0, getBinIndexChan(nSourceChans));

	// siToFi
	// Note: these will fail if no data is recorded
	frameDrift = data.peek(_wrap(0, dim(data)), getBinIndexChan(nSourceChans));

	TestFailures += assertEq(0x20, 1, siToFi(2000, snFftWindowSize, data, nSourceChans));
	Debug1 = frameDrift;
	frameCountCorrection = frameDrift == 0 ? 1 : 0;
	f, Debug0 = 			assertEq(0x40, -1 + frameCountCorrection , siToFi(0, snFftWindowSize, data, nSourceChans));
	TestFailures += f;
	TestFailures += assertEq(0x80, 0 + frameCountCorrection, 
		siToFi(snFftWindowSize - data.peek(0, getBinIndexChan(nSourceChans)),
			snFftWindowSize, data, nSourceChans));
	TestFailures += assertEq(0x100, -1 + frameCountCorrection, 
		siToFi(snFftWindowSize - data.peek(0, getBinIndexChan(nSourceChans)),
			snFftWindowSize, data, nSourceChans) - 1);

	// addressBin
	f, Debug0 = assertEq(0x200, 16, data.peek(
		addressBin(
			siToFi(2000, snFftWindowSize, data, nSourceChans),
			16,
			snFftWindowSize,
			data, nSourceChans), 
			getBinIndexChan(nSourceChans)
	));
	TestFailures += f;


	// addressWavFrameStart
	TestFailures += assertEq(0x400, 1, siToFi(2000, snFftWindowSize, data, nSourceChans));
	expectedFrame1StartAddress =  (2 - frameCountCorrection) * 1024 - frameDrift;
	f, Debug1 = assertEq(0x800, expectedFrame1StartAddress, 
		addressWavFrameStart(1, snFftWindowSize,
			data, nSourceChans));
	TestFailures += f;

	// uniformRand01
	fail1000 = 0;
	for (i = 0; i < 1000; i+=1) {
		r = uniformRand01();
		if (r < 0. || r > 1.) {
			fail1000 += 1;
		}
	} 
	TestFailures += assertEq(0x1000, 0, fail1000);

	// frame chan sanity
	prevFrameV = -1;
	f = 0;
	for (i = 0; i < 2000 && f == 0; i+=1) {
		frameV = data.peek(i, getBinIndexChan(nSourceChans));
		expectedFrameV = prevFrameV == 1023 ? 0 : prevFrameV+1;
		if (prevFrameV != -1) {
			f = assertEq(0x2000, expectedFrameV, frameV);
			if (f != 0) {
				Debug0 = i;
				Debug1 = frameV;
				Debug2 = prevFrameV;
			}
		}
		prevFrameV = frameV;
	}
	TestFailures += f;

	f, Debug0 = assertEq(0x4000, 15, data.peek(
		addressBin(
			0,
			15,
			snFftWindowSize,
			data, nSourceChans), 
			getBinIndexChan(nSourceChans)
	));
	TestFailures += f;
	f, Debug0 = assertEq(0x4000, 0, data.peek(
		addressBin(
			-1,
			0,
			snFftWindowSize,
			data, nSourceChans), 
			getBinIndexChan(nSourceChans)
	));
	TestFailures += f;

		
}
if (TestIn == 2) {
	// selectKthLargest
	testData.poke(0.0, 2, 0);
	testData.poke(3.0, 3, 0);
	testData.poke(1.0, 4, 0);
	testData.poke(1.0, 5, 0);
	testData.poke(2.0, 6, 0);
	testData.poke(3.0, 7, 0);

	TestFailures += assertEq(0x1, 3, selectKthLargest(testData, 0, 2, 6, 0));
	TestFailures += assertEq(0x2, 7, selectKthLargest(testData, 0, 2, 6, 1));
	f, Debug0= assertEq(0x4, 6, selectKthLargest(testData, 0, 2, 6, 2));
	TestFailures += f;
	TestFailures += assertEq(0x8, 4, selectKthLargest(testData, 0, 2, 6, 3));
	TestFailures += assertEq(0x10, 5, selectKthLargest(testData, 0, 2, 6, 4));
	TestFailures += assertEq(0x20, 2, selectKthLargest(testData, 0, 2, 6, 5));
	TestFailures += assertEq(0x40, 6, selectKthLargest(testData, 0, 2, 5, 1));

}
if (TestIn == 3) {
	// performance and precaching tests

	// performance - looks like >2 secs will result in a crash
	nsScanLength = 44100*0;
	Debug0 = nsScanLength;
	sum = 0;
	for (si = 0; si < nsScanLength; si += 1) {
		sum += data.peek(si, 0);
	}
	Debug1 = sum;

	// precaching
	prevFrameIndex = -1;
	sourceChanI = 1;


	f = 0;
	for (fi = -1; fi < 20 && f == 0; fi += 1) {
		maxI = -1;
		maxV = -1;
		for (bin = 0; bin < 512; bin += 1) {
			v = data.peek(
				addressBin(fi, bin,  snFftWindowSize, data, nSourceChans), 
				getSourceChan(SEC_MAG(), sourceChanI, nSourceChans)
			);
			if (v > maxV ) {
				maxV = v;
				maxI = bin;
			}
		}

		f,Debug0 = assertEq(0x01, 
			maxI,
			peekFrameCache(fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), sourceChanI, 
        		snFftWindowSize, data, nSourceChans));
		Debug1 = fi;
		Debug2 = maxI;
		Debug3 = maxV;

		f += assertEq(0x02, 
			maxV,
			peekFrameCache(fi, F_FRAME_CACHE_FUNDAMENTAL_VALUE(), sourceChanI, 
        		snFftWindowSize, data, nSourceChans));
	}
	TestFailures += f;

	TestFailures += assertEq(0x4, 14, getSourceChan(SEC_FRAME_CACHE(), 0, nSourceChans));
	TestFailures += assertEq(0x8, 16, getSourceChan(SEC_FRAME_CACHE(), nSourceChans-1, nSourceChans));


	f = 0;
	impliedAddrDrift = -1;
	for (i = 0; i < 2 && f == 0; i+=1) {
		fi = i == 0 ? -1 : (i == 1 ? 1 : 177);
		//poke
		oldVal, peekAddr = peekFrameCache(fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), 1,
			snFftWindowSize, data, nSourceChans);
		
		_, pokeAddr = pokeFrameCache(oldVal * 2, fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), 1,
			snFftWindowSize, data, nSourceChans);

		curImpliedAddrDrift = (peekAddr + 1024) % 1024;
		if (i > 0) {
			f = assertEq(0x40, impliedAddrDrift, curImpliedAddrDrift);
			// Debug1 = impliedAddrDrift;
			// Debug2 = fi;
		}
		f += assertEq(0x10, oldVal * 2, peekFrameCache(fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), 1,
			snFftWindowSize, data, nSourceChans));
		f += assertEq(0x20, peekAddr, pokeAddr);
		
		impliedAddrDrift = curImpliedAddrDrift;

		pokeFrameCache(oldVal, fi, F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX(), 1,
			snFftWindowSize, data, nSourceChans);
	}
	TestFailures += f;
	

		
}

// ====== /TEST SECTION ==============

// ======= returns ===================

out1 = ResultGrainPos;
out2 = ResultGrainChan ;
out3 = ResultGrainScale;
out4 = ResultGrainPhaseShift;

out6 = TelemetryGuideMatchBin;
out7 = TelemetrySourceMatchBin;

out10 = Debug0;
out11 = Debug1;
out12 = Debug2;
out13 = Debug3;

out15 = 1-TestFailures;
